
from aiogram import Router, F, flags, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, BufferedInputFile, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import Game, Player, utc_plus_5
from filters.chat_type import ChatTypeFilter
from keyboard.start import main_menu_kb, cancel_kb, create_profile_update_kb, create_faculty_selection_kb, faculties, \
    course_button_kbs
from state.registr import Photo, Full_name

router = Router()  # [1]
router.message.filter(ChatTypeFilter(chat_type="private"))
@router.message(Command("start"))  # [2]
@flags.throttling_key('default')
async def cmd_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–∞—Ç–µ–ª—è –∏ —Å–ø–∞—Å—Ç–∏ —ç–∫–∏–ø–∞–∂ –≤ Among Us?",
        reply_markup=main_menu_kb(message.from_user.id)
    )


@router.message(F.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å üë§")
@flags.throttling_key('default')
async def display_profile(message: Message, session: AsyncSession, bot: Bot):
    player = await session.get(Player, message.from_user.id)

    if not player:
        player = Player(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            is_registered=False
        )
        session.add(player)
        await session.commit()

    profile_info = (
        f"**üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞:**\n\n"
        f"- **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{message.from_user.username}`\n"
        f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–±–∏–π—Å—Ç–≤:** `{player.count_kill}`\n"
        f"- **–ü–æ–±–µ–¥—ã:** `{player.winrate}`\n"
        f"- **–ü–æ—Ä–∞–∂–µ–Ω–∏—è:** `{player.losses}`\n"
        f"- **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** `{player.date_register}`\n\n"
    )

    # Add optional fields if they exist
    if player.first_name or player.last_name :
        profile_info += f"- **–§–ò–û:** `{player.first_name}{" "+player.sur_name if player.sur_name else ''} {player.last_name}`\n"
    if player.faculty:
        profile_info += f"- **–§–∞–∫—É–ª—å—Ç–µ—Ç:** `{faculties[player.faculty]}`\n"
    if player.course:
        profile_info += f"- **–ö—É—Ä—Å:** `{player.course}`\n"
    if player.phone:
        profile_info += f"- **–¢–µ–ª–µ—Ñ–æ–Ω:** `{player.phone}`\n"

    # Create inline keyboard for updating missing information
    update_kb = create_profile_update_kb(player)

    # Send profile photo if available; otherwise, send text-only profile
    if player.photo:
        await bot.send_photo(
            chat_id=message.chat.id,
            caption=profile_info,
            parse_mode="Markdown",
            photo=BufferedInputFile(player.photo, filename="photo.jpg"),
            reply_markup=update_kb
        )
    else:
        await message.answer(profile_info, parse_mode="Markdown", reply_markup=update_kb)



@router.callback_query(F.data == "add_photo")
@flags.throttling_key('default')
async def set_photo(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è")
    await state.set_state(Photo.send_photo)

@router.message(StateFilter(None),Command("set_photo"))
@flags.throttling_key('default')
async def set_photo(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è")
    await state.set_state(Photo.send_photo)

@router.message(
    Photo.send_photo,
    F.photo
)
async def food_chosen(message: Message, state: FSMContext, session: AsyncSession):
    file_path = await message.bot.download(file=message.photo[-1].file_id)


    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    player = await session.get(Player, message.from_user.id)
    if not player:
        player = Player(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            is_registered=False
        )
        session.add(player)
        await session.commit()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ BLOB

    player.photo = file_path.read()
    await session.commit()

    await message.answer("–í–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()

@router.message(Photo.send_photo)
@flags.throttling_key('default')
async def food_chosen(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. /set_photo")
    await state.clear()


@router.callback_query(F.data == "add_faculty")
async def add_faculty_prompt(callback_query: CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=create_faculty_selection_kb())
@router.message(Command("set_faculty"))
async def add_faculty_prompt(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=create_faculty_selection_kb())

@router.callback_query(F.data.startswith("select_faculty:"))
async def save_faculty(callback_query: CallbackQuery, session: AsyncSession):
    selected_faculty = callback_query.data.split(":")[1]
    player = await session.get(Player, callback_query.from_user.id)
    player.faculty = selected_faculty
    await session.commit()
    await callback_query.message.edit_text(f"–§–∞–∫—É–ª—å—Ç–µ—Ç '{faculties[selected_faculty]}' –¥–æ–±–∞–≤–ª–µ–Ω.")





@router.callback_query(F.data =="add_name")
@flags.throttling_key('default')
async def set_photo(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=cancel_kb())
    await state.set_state(Full_name.name)


@router.message(StateFilter(None),Command("set_name"))
@flags.throttling_key('default')
async def set_photo(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=cancel_kb())
    await state.set_state(Full_name.name)

@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞", StateFilter(Full_name))
async def cancel_registration(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_kb(message.from_user.id))

@router.message(Full_name.name)
async def set_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Full_name.last_name)

@router.message(Full_name.last_name)
async def set_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '-'): ")
    await state.set_state(Full_name.surname)

@router.message(Full_name.surname)
async def set_middle_name(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    middle_name = message.text if message.text != '-' else None

    # Check if the user is already registered
    player = await session.get(Player, message.from_user.id)
    if not player:
        player = Player(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            is_registered=False
        )
        session.add(player)
        await session.commit()

    player.first_name = data["first_name"]
    player.last_name = data["last_name"]
    player.sur_name = middle_name
    await session.commit()

    # Create a new Player instance with FIO details
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=main_menu_kb(message.from_user.id))
    await state.clear()




@router.callback_query(F.data == "add_course")
async def add_faculty_prompt(callback_query: CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=course_button_kbs())

@router.message(Command("set_course"))
async def add_faculty_prompt(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=course_button_kbs())


@router.callback_query(F.data.startswith("course_"))
async def save_faculty(callback_query: CallbackQuery, session: AsyncSession):
    course = callback_query.data.split("_")[1]
    player = await session.get(Player, callback_query.from_user.id)
    player.course = course
    await session.commit()
    await callback_query.message.edit_text(f"–ö—É—Ä—Å {course} –≤—ã–±—Ä–∞–Ω")


@router.message(F.text.lower() == "–æ –Ω–∞—Å ü©∏")
@flags.throttling_key('default')
async def display_profile(message: Message, session: AsyncSession, bot: Bot):
    await message.answer(
    "–û –Ω–∞—Åü©∏\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ç–µ–Ω–µ–π \n"
    "–∏ –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤‚Ä¶ Slayer KBTU ‚Äî \n"
    "—ç—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∏–≥—Ä–∞, –≥–¥–µ \n"
    "–∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ–≥–æ –æ—Ö–æ—Ç–Ω–∏–∫–∞ –∏ —Ü–µ–ª—å \n"
    "–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –í–∞—Å –∂–¥–µ—Ç –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω, "
    "–∂—É—Ç–∫–∏–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –∏ –Ω–∞—Å—Ç–æ—è—â–∞—è –±–∏—Ç–≤–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ! \n"
    "–û—Å—Ç–∞–Ω—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –¥–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã - –¥–æ—Å—Ç–æ–π–Ω—ã–π \n"
    "–ø–æ–±–µ–¥–∏—Ç–µ–ª—å.\n\n"
    "–°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫ –æ—Ö–æ—Ç–µ!\n"
    "@amoung_news"
    )

@router.message(F.text.lower() == "–ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã üëª")
@flags.throttling_key('default')
async def display_profile(message: Message, session: AsyncSession, bot: Bot):
    await message.answer(
    """
–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ãüëª

–¢—ã —Å—Ç–∞–ª –æ—Ö–æ—Ç–Ω–∏–∫–æ–º –≤ –Ω–æ—á–∏, –Ω–æ –∏–≥—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ª–æ–≤–∫–æ—Å—Ç–∏, –Ω–æ –∏ —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª. –ü–æ–º–Ω–∏:
    
 *‚Ä¢ –¶–µ–ª—å:* –∫–æ—Å–Ω–∏—Å—å –∏–ª–∏ –æ—Ç–º–µ—Ç—å —Å–≤–æ—é ‚Äú–¥–æ–±—ã—á—É‚Äù. –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞–±–∏—Ä–∞–µ—Ç –∂–µ—Ç–æ–Ω –∏–ª–∏ –æ—Ç–º–µ—Ç–∫—É –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ.
 *‚Ä¢ –ú–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è:* –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∑–∞–º–∫–Ω—É—Ç–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è ‚Äî –Ω–µ –ø—ã—Ç–∞–π—Å—è —Å–±–µ–∂–∞—Ç—å!
 *‚Ä¢ –ó–∞—â–∏—Ç–∞ –∏ —É–∫—Ä—ã—Ç–∏–µ:* –ø—Ä—è—á—å—Å—è –∏ –±–µ–≥–∏, –Ω–æ –ø–æ–º–Ω–∏ ‚Äî –æ—Ö–æ—Ç–∞ –Ω–µ —Ç–µ—Ä–ø–∏—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π!
 *‚Ä¢ –≠—Ç–∏–∫–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:* –Ω–∏–∫–∞–∫–∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫, —É–≤–∞–∂–∞–π –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.
 *‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:* –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∂–∏–≤—à–∏–π –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –ø–æ–π–º–∞–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ü–µ–ª–µ–π. –¢—å–º–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –Ω–æ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω ‚Äî —Ç–µ–±—è —Ç–æ–∂–µ –∏—â—É—Ç!
 """
   ,parse_mode="Markdown" )
